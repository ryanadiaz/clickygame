{"version":3,"sources":["components/ClickyCard/ClickyCard.js","components/Wrapper/Wrapper.js","App.js","registerServiceWorker.js","index.js"],"names":["ClickyCard","handleClick","this","props","className","src","image","alt","dataid","id","dataname","name","onClick","Component","Wrapper","state","clickycards","clicked","score","highScore","helpText","idClicked","console","log","includes","currentScore","setState","push","cards","counter","length","index","Math","floor","random","temp","style","color","shuffle","map","card","key","bind","href","target","rel","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"okCAceA,G,uLAVD,IAAD,OACCC,EAAcC,KAAKC,MAAMF,YAC/B,OACA,6BAASG,UAAU,QACf,yBAAKC,IAAKH,KAAKC,MAAMG,MAAOC,IAAI,aAAaC,OAAQN,KAAKC,MAAMM,GAAIC,SAAUR,KAAKC,MAAMQ,KAAMC,QAAS,kBAAMX,EAAY,EAAKE,MAAMM,Y,GANxHI,c,QCuGVC,E,2MAnGbC,MAAQ,CACNC,cACAC,QAAS,GACTC,MAAO,EACPC,UAAW,EACXC,SAAU,kF,2EAGAC,GAGV,GAFAC,QAAQC,IAAI,cAAeF,GAEvBnB,KAAKa,MAAME,QAAQO,SAASH,GAAY,CAC1CC,QAAQC,IAAI,QAEZ,IAAIE,EAAevB,KAAKa,MAAMG,MAAQhB,KAAKa,MAAMI,UAAYjB,KAAKa,MAAMG,MAAQhB,KAAKa,MAAMI,UAE3FjB,KAAKwB,SAAS,CACVT,QAAS,GACTC,MAAO,EACPC,UAAWM,EACXL,SAAU,iDAET,CACLE,QAAQC,IAAI,SAEZ,IAAIE,EAAevB,KAAKa,MAAMG,OAAShB,KAAKa,MAAMI,UAAYjB,KAAKa,MAAMG,MAAQ,EAAIhB,KAAKa,MAAMI,UAE3E,KAAjBM,EACAvB,KAAKwB,SAAS,CACVT,QAASf,KAAKa,MAAME,QACpBC,MAAO,EACPC,UAAWM,EACXL,SAAU,iCAGdlB,KAAKwB,SAAS,CACVT,QAASf,KAAKa,MAAME,QACpBC,MAAOhB,KAAKa,MAAMG,MAAQ,EAC1BC,UAAWM,EACXL,SAAU,2BAIpBlB,KAAKa,MAAME,QAAQU,KAAKN,K,8BAGlBO,GAIN,IAHA,IAAIC,EAAUD,EAAME,OAGbD,EAAU,GAAG,CAElB,IAAIE,EAAQC,KAAKC,MAAMD,KAAKE,SAAWL,GAMnCM,EAAOP,IAHXC,GAIAD,EAAMC,GAAWD,EAAMG,GACvBH,EAAMG,GAASI,EAGjB,OAAOP,I,+BAGE,IAAD,OAGR,OACE,yBAAKxB,UAAU,WACb,yBAAKA,UAAU,kBACb,6BACE,4CACA,wBAAIgC,MAAQ,CAAEC,MAA+B,6CAAxBnC,KAAKa,MAAMK,SAA0D,MAAQ,UAAalB,KAAKa,MAAMK,UAC1H,4BAAI,wCAAclB,KAAKa,MAAMG,OAAa,4CAAkBhB,KAAKa,MAAMI,aAGzE,8BACGjB,KAAKoC,QAAQpC,KAAKa,MAAMC,aAAauB,KAAI,SAACC,EAAMT,GAAP,OACxC,kBAAC,EAAD,CACEU,IAAKV,EACLtB,GAAI+B,EAAK/B,GACTE,KAAM6B,EAAK7B,KACXL,MAAOkC,EAAKlC,MACZW,QAASuB,EAAKvB,QACdhB,YAAa,EAAKA,YAAYyC,KAAK,UAK3C,gCACE,uBAAGC,KAAK,wBAAwBC,OAAO,SAASC,IAAI,uBAApD,8B,GA7FYhC,aCAPiC,EAFH,kBAAM,kBAAC,EAAD,OCOZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9C,QACfwC,UAAUC,cAAcQ,WAK1B1C,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrB0C,OAAM,SAAAC,GACL5C,QAAQ4C,MAAM,4CAA6CA,MCzEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,GAAwBvB,OAAOC,UAC3CuB,SAAWxB,OAAOC,SAASuB,OAIvC,OAGFxB,OAAOyB,iBAAiB,QAAQ,WAC9B,IAAMpB,EAAK,UAAMkB,GAAN,sBAEPzB,IAiDV,SAAiCO,GAE/BqB,MAAMrB,GACHI,MAAK,SAAAkB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CzB,UAAUC,cAAcyB,MAAMvB,MAAK,SAAAC,GACjCA,EAAauB,aAAaxB,MAAK,WAC7BT,OAAOC,SAASiC,eAKpB9B,EAAgBC,MAGnBW,OAAM,WACL3C,QAAQC,IACN,oEArEA6D,CAAwB9B,GAIxBC,UAAUC,cAAcyB,MAAMvB,MAAK,WACjCpC,QAAQC,IACN,gHAMJ8B,EAAgBC,OCzCxB+B,K","file":"static/js/main.48d0bc61.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\n\r\nclass ClickyCard extends Component {\r\n    \r\n    render() {\r\n        const handleClick = this.props.handleClick;\r\n        return (\r\n        <article className=\"card\">\r\n            <img src={this.props.image} alt=\"clickycard\" dataid={this.props.id} dataname={this.props.name} onClick={() => handleClick(this.props.id)} />\r\n        </article>\r\n        )\r\n    }\r\n};\r\n\r\nexport default ClickyCard;\r\n    ","import React, {Component} from \"react\";\nimport \"./Wrapper.css\";\nimport ClickyCard from \"../ClickyCard/\";\nimport clickycards from \"../../clickycards.json\";\n\nclass Wrapper extends Component {\n  state = {   // this.state.clickycards = the clickycards json array\n    clickycards,\n    clicked: [],\n    score: 0,\n    highScore: 0,\n    helpText: \"Click on an image to earn points, but don't click on any image more than once!\"\n  }\n\n  handleClick(idClicked) {\n    console.log('idClicked: ', idClicked);\n\n    if (this.state.clicked.includes(idClicked)) {\n      console.log(\"true\");\n\n      let currentScore = this.state.score > this.state.highScore ? this.state.score : this.state.highScore\n\n      this.setState({\n          clicked: [],\n          score: 0,\n          highScore: currentScore,\n          helpText: \"Game Over! You already clicked that one.\"\n      });\n    } else {\n      console.log('false');\n\n      let currentScore = this.state.score >= this.state.highScore ? this.state.score + 1 : this.state.highScore\n\n      if (currentScore === 10) {\n          this.setState({\n              clicked: this.state.clicked,\n              score: 0,\n              highScore: currentScore,\n              helpText: \"You win! Thanks for playing.\"\n          });\n      } else {\n          this.setState({\n              clicked: this.state.clicked,\n              score: this.state.score + 1,\n              highScore: currentScore,\n              helpText: \"You guessed correctly!\"\n          });\n      }\n    }\n    this.state.clicked.push(idClicked);\n  }\n\n  shuffle(cards) {\n    let counter = cards.length;\n\n    // While there are elements in the array\n    while (counter > 0) {\n      // Pick a random index\n      let index = Math.floor(Math.random() * counter);\n\n      // Decrease counter by 1\n      counter--;\n\n      // And swap the last element with it\n      let temp = cards[counter];\n      cards[counter] = cards[index];\n      cards[index] = temp;\n    }\n\n    return cards;\n  }\n\n  render () {\n    // const shuffledCards = this.shuffle(this.state.clickycards);\n    // console.log(shuffledCards)\n    return (\n      <div className=\"wrapper\">\n        <div className=\"grid-container\">\n          <nav>\n            <h1>Clicky Game!</h1>\n            <h1 style={ { color: this.state.helpText === \"Game Over! You already clicked that one.\" ? 'red' : 'white' } }>{this.state.helpText}</h1>\n            <h1><span>Score: {this.state.score}</span><span>Top Score: {this.state.highScore}</span></h1>\n          </nav>\n\n          <main>\n            {this.shuffle(this.state.clickycards).map((card, index) => (   // create array of all clickycards, render component for each card\n              <ClickyCard\n                key={index}\n                id={card.id}\n                name={card.name}\n                image={card.image}\n                clicked={card.clicked}\n                handleClick={this.handleClick.bind(this)}\n              />\n            ))}\n          </main>\n        </div>\n        <footer>\n          <a href=\"http://ryanadiaz.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Created by Ryan Diaz</a>\n        </footer>\n      </div>\n    )\n  };\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport Wrapper from \"./components/Wrapper\";\n\nconst App = () => <Wrapper />;\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}